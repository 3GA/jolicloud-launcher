#!/usr/bin/perl

use LWP;
use Logger::Syslog;
use Net::DBus ":typing";
use Net::DBus::Reactor;
use POSIX;

sub is_guest
{
    my $guest_gid = getgrnam("guest");
    my @groups = split(' ',$();
    return grep $_ eq $guest_gid, @groups
}

my $session_manager = Net::DBus->session->get_service('org.gnome.SessionManager')->get_object('/org/gnome/SessionManager') or error("Could not get DBus SessionManager object");
my $sm_client_id = $session_manager->RegisterClient('jolicloud-launcher.desktop','') or error("Could not register with SessionManager");
my $sm_private_client = Net::DBus->session->get_service('org.gnome.SessionManager')->get_object($sm_client_id,'org.gnome.SessionManager.ClientPrivate') or error("Could not get DBus SessionManager.ClientPrivate object with id $sm_client_id");
$sm_private_client->connect_to_signal('Stop', sub {
    notice("shut down by SessionManager");
    });
$sm_private_client->connect_to_signal('QueryEndSession', sub {
    notice("SessionManager signaled QueryEndSession");
    $sm_private_client->EndSessionResponse(dbus_boolean(1),''); });
$sm_private_client->connect_to_signal('EndSession', sub {
    notice("SessionManager signaled EndSession");
    &reaper;
    $sm_private_client->EndSessionResponse(dbus_boolean(1),'');
    exit;
    });

my $reactor = Net::DBus::Reactor->main();

$| = 1;
$0 = "jolicloud-launcher";
my $pid = $$;
open PARENT, sprintf("/proc/%d/cmdline",getppid);
my $parent = <PARENT>;
close PARENT;
$parent =~ s/\0.*//;
info( sprintf ( "started by %d (%s)",getppid,$parent ) );

setpgrp;

# kill any remaining jolicloud-launcher from a previous session
opendir(PROC, "/proc");
@cmds = grep { /^\d+$/ && -f "/proc/$_/cmdline" } readdir(PROC);
closedir PROC;

my $killed = 0;
foreach (@cmds) { # jolicloud-launcher
    open(CMD,"/proc/$_/cmdline");
    $cmd = <CMD>;
    close CMD;
    $cmd =~ s/\0.*//;
    if ($cmd eq $0 && $$ ne $_) {
        info( "killing $_" );
        kill 'TERM', $_;
        $killed = 1;
    }
}

sleep 1 if $killed;

$killed = 0;
foreach (@cmds) { # above ought to have killed any remaining jolicloud-daemon or nickel-browser but you never know
    open(CMD,"/proc/$_/cmdline");
    $cmd = <CMD>;
    close CMD;
    $cmd =~ s/\0.*//;
    if ($cmd =~ /jolicloud-daemon/) {
        info( "killing $_" );
        kill 'TERM', $_;
        $killed = 1;
    }
    elsif ($cmd =~ m|^/usr/lib/nickel-browser.*--desktop|) {
        info( "killing $_" );
        kill 'TERM', $_;
        $killed = 1;
    }
}

sleep 1 if $killed;

use constant {
    ONLINE_URL => "http://my.jolicloud.com",
    OFFLINE_URL => "file:///usr/share/jolicloud-daemon/htdocs/index.html",
};

my $child;
my @children;

$child = fork;
if ( !defined($child) ) {
    error( "could not fork jolicloud-daemon: $!");
}
elsif ( $child == 0 ) {
    close( STDOUT );
    close( STDERR );
    open $devnull, '+>', '/dev/null';
    dup2( STDOUT, $devnull );
    dup2( STDERR, $devnull );
    $0 .= " [jolicloud-daemon]";
    logger_prefix("jolicloud-daemon");
    for ( ;; ) {
        if ( `pgrep -fl ^jolicloud-daemon` ) {
            sleep( 5 );
            next;
        }
        info( "launching" );
        system( "/usr/bin/jolicloud-daemon" );
        if ( $? == -1 ) {
            error( "failed to execute: $!" );
        }
        elsif ( WIFSIGNALED $? ) {
            error( sprintf( "jolicloud-daemon died with signal %d, %s coredump",
                ( WTERMSIG( $? ) ), ( $? & 128 ) ? 'with' : 'without' ) );
        }
        else {
            error( "jolicloud-daemon exited with value " . WEXITSTATUS( $? ) );
        }
    }
    exit;
}
else {
    push @children,$child;
}

$child = fork;
if ( !defined($child) ) {
    error( "could not fork nickel-browser: $!");
}
elsif ( $child == 0 ) {
    close( STDOUT );
    close( STDERR );
    open $devnull, '+>', '/dev/null';
    dup2( STDOUT, $devnull );
    dup2( STDERR, $devnull );
    $0 .= " [nickel-browser]";
    logger_prefix("nickel-browser");

    my $incognito_flag = "--no-incognito";
    $incognito_flag = "--incognito" if &is_guest;

    my $max_flag = "--start-maximized";
    open XDPYINFO, "xdpyinfo |";
    while (<XDPYINFO>) {
        if (/^ *dimensions:.+\((\d+)x(\d+) millimeters/) {
            $width = $1*0.03937 ;
            $height = $2*0.03937 ;
            $diag2 = $width*$width + $height*$height;
            if ($diag2 > 169 ) { # 13" diag
                $max_flag = "--no-start-maximized";
            }
        }
    }
    close XDPYINFO;

    for ( ;; ) {
        if ( `pgrep -fl nickel-browser | grep '\\-\\-desktop'` ) {
            sleep( 5 );
            next;
        }

        info( "launching $max_flag $incognito_flag" );

        # Do a generic ping of the ping URL. If it responds with error
        # status 400: NOT_LOGGED_IN we know we have internet access to the
        # jolicloud server.
        my $ua = LWP::UserAgent->new();
        my $req = HTTP::Request->new( GET => ONLINE_URL . "/api/ping" );
        my $res = $ua->request( $req );
        my $url = ONLINE_URL;
        unless ( $res->code eq 400 &&
             $res->content eq '{"error":{"code":"NOT_LOGGED_IN"}}' ) {
            # No internet access, display the internal offline URL.
            $url = OFFLINE_URL;
        }

        system( "/usr/bin/nickel-browser", "--app=$url", "--desktop",
                "--no-default-browser-check",
                $max_flag, $incognito_flag,
                "--no-first-run", "--enable-ipv6" );
        if ( $? == -1 ) {
            error( "failed to execute: $!" );
        }
        elsif ( WIFSIGNALED $? ) {
            error( sprintf( "nickel-browser died with signal %d, %s coredump",
                ( WTERMSIG( $? ) ), ( $? & 128 ) ? 'with' : 'without' ) );
            if ( WTERMSIG( $? ) == 6 ) { # ABRT received, usually means end of session
                kill 'QUIT', $pid;
            }
        }
        else {
            error( "nickel-browser exited with value " . WEXITSTATUS( $? ) );
        }
    }
    exit;
}
else {
    push @children,$child;
}

$SIG{ 'QUIT' } = \&reaper;
$SIG{ 'INT' } = \&reaper;
$SIG{ 'TERM' } = \&reaper;
$SIG{ 'KILL' } = \&reaper;
$SIG{ 'HUP' } = 'IGNORE';

# If something happens to the main program, kill all the program group
sub reaper
{
    my $sig = shift;
    info( "caught a SIG$sig--shutting down" ) if $sig;
    info( "shutting down" ) unless $sig;
    # kill our direct children first, so that they don't relaunch the others
    foreach(@children) {
        info( "killing $_" );
        kill( 'TERM', $_);
    }
    sleep 1;
    local $SIG{'QUIT'} = 'IGNORE';
    kill( 'QUIT', -getpgrp );
    sleep 1;
    local $SIG{'TERM'} = 'IGNORE';
    kill( 'TERM', -getpgrp );
    $session_manager->UnregisterClient($sm_client_id);
    exit if $sig;
}

# Wait for all children before exiting
my $hook = $reactor->add_hook(Net::DBus::Callback->new(
    method => sub {
        my $kid;
        do {
            $kid = waitpid( -1, WNOHANG );
        } while $kid > 0;
    }));

$reactor->run();
